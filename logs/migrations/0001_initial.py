# Generated by Django 3.2.18 on 2023-09-10 07:25

import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wods', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookmarkLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bookmark_log',
            },
        ),
        migrations.CreateModel(
            name='LikeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'like_log',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('today_condition', models.CharField(default='좋음', max_length=50)),
                ('illness', models.CharField(default='없음', max_length=20)),
                ('illness_range', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=1), django.core.validators.MaxValueValidator(limit_value=10)])),
                ('new_date', models.CharField(default='20230910', max_length=8)),
                ('warmup', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('conditioning', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('strength', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('weightlifting', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('accessories', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('image', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='wods/')),
                ('video', models.FileField(blank=True, null=True, upload_to='logs/videos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('friends_only', 'Friends Only'), ('private', 'Private')], default='public', max_length=20)),
                ('bookmark_users', models.ManyToManyField(blank=True, related_name='bookmark_logs', through='logs.BookmarkLog', to=settings.AUTH_USER_MODEL)),
                ('like_users', models.ManyToManyField(blank=True, related_name='like_logs', through='logs.LikeLog', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wod', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wods.wod')),
            ],
        ),
        migrations.AddField(
            model_name='likelog',
            name='log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='logs.log'),
        ),
        migrations.AddField(
            model_name='likelog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bookmarklog',
            name='wod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='logs.log'),
        ),
    ]
